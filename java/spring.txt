Spring IoC基礎：

Maven依賴：
	<groupId>org.springframework</groupId>
	<artifactId>spring-context</artifactId>
	<version>5.2.3.RELEASE</version>

裝配Bean：
	@Component
	public class UserService {
		MailService mailService;

		public UserService(@Autowired MailService mailService) {
			this.mailService = mailService;
		}
		...
	}

@Component 被標註的類別相當於定義一個Bean
@Autowired 依類型自動將Bean注入(可寫在建構子、函數、成員上)

設定Scope：
	@Component
	@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE) // @Scope("prototype")
	public class MailSession {
		...
	}

SCOPE_PROTOTYPE 在每次呼叫getBean(Class)，容器都會回傳一個新的Bean
SCOPE_SINGLETON 容器初始化時創建Bean，容器關閉前銷毀Bean。在容器運行期間，我們呼叫getBean(Class)獲取到的Bean總是同一個實例。(預設是這個)

設定Profile：
    @Bean
    @Profile("!test")
    ZoneId createZoneId() {
        return ZoneId.systemDefault();
    }

    @Bean
    @Profile("test")
    ZoneId createZoneIdForTest() {
        return ZoneId.of("America/New_York");
    }
	
如果當前的Profile設置為test，則Spring容器會調用createZoneIdForTest()創建ZoneId，否則，調用createZoneId()創建ZoneId。注意到@Profile("!test")表示非test環境。
加上JVM參數 -Dspring.profiles.active=test 就可以指定以test環境啟動。
也可以同時使用多個Profile -Dspring.profiles.active=test,master

----------------------------------------------------------------------------------------------------------------------------
編寫Config：
	@Configuration
	@ComponentScan
	@PropertySource("app.properties")
	public class AppConfig {
		public static void main(String[] args) {
			ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class);
			UserService userService = context.getBean(UserService.class);
			User user = userService.login("bob@example.com", "password");
			System.out.println(user.getName());
		}
	}
	
	
@Configuration 表示此類別是一個配置類別
@ComponentScan 使用此標註會自動掃描這個類別所在的package及子package, 把所有標註為@Component的Bean自動創建出來, 並根據@Autowired進行裝配
	
AnnotationConfigApplicationContext 以標註方式建立容器, 如果是XML設置使用 ClassPathXmlApplicationContext
getBean(Class) 從容器取出Bean

使用Annotation配合自動掃描能大幅簡化Spring的配置，我們只需要保證：
	1. 每個Bean被標註為@Component並正確使用@Autowired注入; 
	2. 配置類被標註為@Configuration和@ComponentScan;
	3. 所有Bean均在指定包以及子包內;
	
@PropertySource("app.properties") 註解後，Spring自動讀取這個配置文件，然後，我們使用@Value正常注入：( 格式${key:defaultValue} )
	@Value("${app.zone:Z}")
	String zoneId;
	
===================================================================================================================================================================
集成Hibernate：

注入Hibernate(XML)：
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="configLocation" value="classpath:hibernate.cfg.xml"/> // 注入Hibernate 配置文件路径,前面要加上  classpath:
	</bean>
	
	<bean id="studentDao" class="com.startspring.dao.impl.StudentDaoImpl">
        <property name="sessionFactory" ref="sessionFactory" /> // 把sessionFactory 注入给studentDao
    </bean>

XML注入Hibernate(不使用hibernate.cfg.xml)：
	// 数据源
    <bean id="dataSource" destroy-method="close" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="oracle.jdbc.OracleDriver" />
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:ORCL" />
        <property name="user" value="hib" />
        <property name="password" value="hib" />
    </bean>
	// 添加sessionFactory bane ，注意，该类是Spring提供的
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/> // 把数据源 bean 注入到sessionFactory的dataSource属性
        <property name="hibernateProperties"> // hibernate的基本配置，如:方言，是否显示sql等
            <props>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.current_session_context_class">thread</prop>
                <prop key="hibernate.dialect">org.hibernate.dialect.Oracle10gDialect</prop>
            </props>
        </property>
        <property name="mappingLocations"> // 引入映射文件，如果有多个可以继续添加 <value>
            <list>
                <value>com/startspring/entrty/Student.hbm.xml</value>
            </list>
        </property>
    </bean>

JavaConfig注入hibernate(AutoScan):
	public class AppConfig {
		@Bean
		DataSource createDataSource() { ... }
		
		@Bean
		LocalSessionFactoryBean createSessionFactory(@Autowired DataSource dataSource) {
			var props = new Properties();
			props.setProperty("hibernate.hbm2ddl.auto", "update"); // 生产环境不要使用
			props.setProperty("hibernate.dialect", "org.hibernate.dialect.HSQLDialect");
			props.setProperty("hibernate.show_sql", "true");
			var sessionFactoryBean = new LocalSessionFactoryBean(); // from spring
			sessionFactoryBean.setDataSource(dataSource);
			sessionFactoryBean.setPackagesToScan("com.itranswarp.learnjava.entity");
			sessionFactoryBean.setHibernateProperties(props);
			return sessionFactoryBean;
		}
	}

XML注入hibernate(AutoScan):
	<bean id="sessionFactory"
		  class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		  p:dataSource-ref="dataSource"
		  p:configLocation="WEB-INF/classes/hibernate.cfg.xml"
		  p:packagesToScan="com.example.model"
	/>
	
	
===================================================================================================================================================================
參考：

廖雪峰 - Spring开发
https://www.liaoxuefeng.com/wiki/1252599548343744/1266263217140032

廖雪峰 - 集成Hibernate
https://www.liaoxuefeng.com/wiki/1252599548343744/1266263275862720

Spring3 整合 Hibernate4 - 注入SessionFactory
https://www.cnblogs.com/likailan/p/3460301.html

stackoverflow - How to scan packages for Hibernate entities instead of using hbm.xml?
https://stackoverflow.com/questions/11257598/how-to-scan-packages-for-hibernate-entities-instead-of-using-hbm-xml

良葛格 - SessionFactory 注入
https://openhome.cc/Gossip/SpringGossip/SessionFactoryInjection.html